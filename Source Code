#!/usr/bin/env python
# coding: utf-8

import binascii

BookInitPermOrder = [58,50,42,34,26,18,10,2,                   
                     60,52,44,36,28,20,12,4,                   
                     62,54,46,38,30,22,14,6,                   
                     64,56,48,40,32,24,16,8,                   
                     57,49,41,33,25,17,9,1,                   
                     59,51,43,35,27,19,11,3,                  
                     61,53,45,37,29,21,13,5,                   
                     63,55,47,39,31,23,15,7]
                     
BookInvInitPermOrder = [40,8,48,16,56,24,64,32, 
                        39,7,47,15,55,23,63,31,                        
                        38,6,46,14,54,22,62,30,                        
                        37,5,45,13,53,21,61,29,                       
                        36,4,44,12,52,20,60,28,                       
                        35,3,43,11,51,19,59,27,                        
                        34,2,42,10,50,18,58,26,                        
                        33, 1,41, 9,49,17,57,25]

PC_1 = [57, 49, 41, 33, 25, 17, 9,        
        1, 58, 50, 42, 34, 26, 18,        
        10, 2, 59, 51, 43, 35, 27,       
        19, 11, 3, 60, 52, 44, 36,      
        63, 55, 47, 39, 31, 23, 15,      
        7, 62, 54, 46, 38, 30, 22,       
        14, 6, 61, 53, 45, 37, 29,       
        21, 13, 5, 28, 20, 12, 4]
        
PC_2 =  [14, 17, 11, 24, 1, 5, 3, 28, 
         15, 6, 21, 10, 23, 19, 12, 4,      
         26, 8, 16, 7, 27, 20, 13, 2,        
         41, 52, 31, 37, 47, 55, 30, 40,      
         51, 45, 33, 48, 44, 49, 39, 56,      
         34, 53, 46, 42, 50, 36, 29, 32]
         
SBOX = [
# Box-1[
[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
[0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
[4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
[15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],

# Box-2[
[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
[3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
[0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
[13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],

# Box-3[
[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
[13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
[13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
[1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],

# Box-4[
[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
[13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
[10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
[3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],

# Box-5[
[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
[14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
[4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
[11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],

# Box-6[
[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
[10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
[9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
[4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],

# Box-7[
[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
[13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
[1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
[6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],

# Box-8[
[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
[1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
[7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
[2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]

binaryDECtoBIN4 = {0: '0000',
                   1: '0001',            
                   2: '0010',           
                   3: '0011',           
                   4: '0100',           
                   5: '0101',          
                   6: '0110',          
                   7: '0111',           
                   8: '1000',            
                   9: '1001',          
                   10: '1010',           
                   11: '1011',         
                   12: '1100',           
                   13: '1101',           
                   14: '1110',            
                   15: '1111'}
                   
Shift = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]

E_TABLE = [32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,
           18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1]
           
PafterS = [16, 7, 20, 21, 29, 12, 28, 17,     
            1, 15, 23, 26, 5, 18, 31, 10,    
            2, 8, 24, 14, 32, 27, 3, 9,     
            19, 13, 30, 6, 22, 11, 4, 25]
            
def byte2str(byteseq):   

  intlist = [int(b) for b in byteseq]    
  bitslist1 = [bin(i)[2:].zfill(8) for i in intlist]    
  bitslist2 = [bin(int(b))[2:].zfill(8) for b in intlist]   
  
  allbits = ''.join(bitslist2)    
  return allbits
  
def hex2str(byteseq):    
  
    list = []    
    for i in range(len(byteseq)):
      val = bin(int(byteseq[i],16))[2:].zfill(4)        
      list.append(val)    
      
    allbits = ''.join(list)    
    return allbits
    
 def XORbits(byteseq1, byteseq2):   
   xorlist = []    
   for x,y in zip(byteseq1, byteseq2):        
     if(x==y):           
       xorlist.append('0')        
     else:            
       xorlist.append('1')    
       
   xor_result = ''.join(xorlist)   
   return xor_result
   
def split(allbits48):   

  b6list = [allbits48[i:i+6] for i in range(0,len(allbits48), 6)]    
  return b6list
  
def des_keygen(C_inp, D_inp, roundindex):   

  C_out, D_out = shift(C_inp, D_inp, Shift[roundindex])   
  text = C_out + D_out   
  val = [x-1 for x in PC_2]  
  
  key48 = Permutation(text, val)    
  return key48, C_out, D_out
  
def shift(C_inp, D_inp,num):    
  
  return C_inp[num:] + C_inp[:num], D_inp[num:] + D_inp[:num]
  
def Permutation(bitstr, permorderlist):  

  permedbitstr = None    
  permedbitstr = [bitstr[b] for b in permorderlist]   
  permedbitstr = ''.join(permedbitstr)    
  
  return permedbitstr
  
def Expansion(inputbitstr32, E_TABLE):    
  outputbitstr48 = ''    
  val = [x-1 for x in E_TABLE]
  outputbitstr48 = Permutation(inputbitstr32, val)  
  return outputbitstr48
  
def sbox_lookup(input6bitstr, sboxindex):    

  row = 0    
  col = 0   
  for i in range(len(input6bitstr)):        
    val = input6bitstr[i]        
    row_val = int(input6bitstr[0] + input6bitstr[5], base=2)        
    col_val = int(input6bitstr[1:5],base=2)       
    row_val = row       
    col_val = val       
    sbox_value = SBOX[sboxindex][row][col]    
    return DECtoBIN4[sbox_value]
    
def functionF(bitstr32, keybitstr48):  

  # return the result    
  outbitstr32 = ''    
  val = ''    
  sub_bits=[]    
  
  val2 = [x-1 for x in E_TABLE]    
  temp = Expansion(bitstr32, val2)   
  keyed_val = XORbits(temp,keybitstr48)   
  sub_bits =  split(keyed_val)    
  
  for i in range(8):        
    subval = sbox_lookup(sub_bits[i],i)        
    val =  val + subval    
    
  value = [x-1 for x in PafterS]    
  outbitstr32 = Permutation(val, value)    r
  
  eturn outbitstr32
  
def des_round(LE_inp32, RE_inp32, key48):    

  LE_out32 = RE_inp32    
  RE_out32 = functionF(RE_inp32, key48)   
  RE_out32 = XORbits(LE_inp32,RE_out32)    
  
  return LE_out32, RE_out32
  
def des_enc(inputblock, num_rounds, inputkey64):

  inputkey64 = byte2str(inputkey64)    
  val = [x-1 for x in PC_1]   
  
  keyinp56 = Permutation(inputkey64, val)    
  keyinp28 = [keyinp56[i:i+28] for i in range(0, len(keyinp56), 28)]    
  val = [x-1 for x in BookInitPermOrder]    
  
  inputstr = byte2str(inputblock)    
  inputstr= Permutation(inputstr, val)    
  input_seq = [inputstr[i:i+32] for i in range(0, len(inputstr), 32)]    
  
  for i in range(num_rounds):       
    key48, C_out, D_out = des_keygen(keyinp28[0], keyinp28[1],i)        
  
    keyinp28[0]= C_out        
    keyinp28[1]= D_out        
  
    LE_out32, RE_out32 = des_round(input_seq[0], input_seq[1], key48)        
    input_seq[0] = LE_out32        
    input_seq[1] = RE_out32    
    
  text = RE_out32 + LE_out32    
  val2 = [x-1 for x in BookInvInitPermOrder]    
  
  cipherblock = Permutation(text, val2)  
  return cipherblock
  
def des_enc_test(input_fname, inputkey64, num_rounds, output_fname):    
  
  finp = open(input_fname, 'rb')   
  inpbyteseq = finp.read()    
  finp.close()     
  
  inp = [inpbyteseq[i:i+8] for i in range(0, len(inpbyteseq), 8)]    
  LastBlock_len = len(inp[len(inp)-1])    
  
  if(LastBlock_len < 8):        
    for i in range(LastBlock_len, 8):           
      inp[len(inp)-1] += b'\x20'    
  
  temp = []    
  for x in range(len(inp)):        
    input_seq = des_enc(inp[x], 16, inputkey64)        
    temp.append(input_seq)    
  
  cipherbyteseq = ''.join(temp)    
  inp = cipherbyteseq.encode('ascii')    
  inp = [inp[i:i+8] for i in range (0, len(inp),8)]
  
  hexval = [hex(int(inp[h],2))[2:].zfill(2) for h in range (len(inp))]    
  cipherbyteseq =''.join(hexval)    
  
  print("Ciphertext: ", cipherbyteseq)    
  cipherbyteseq = bytes(cipherbyteseq, 'utf-8')    
  
  fout = open(output_fname, 'wb')    
  fout.write(cipherbyteseq)    
  fout.close()    
  
  #des_dec_test('output.txt', 'a1b2c3d4', 16, 'output.txt')
  
  
def des_dec(inputblock, num_rounds, inputkey64):    

  inpkey28 = []   
  keyinp48= []    
  plainblock =[]    
  
  val = [x-1 for x in PC_1]    
  keyinp56 = Permutation(inputkey64, val)    
  keyinp28 = [keyinp56[i:i+28] for i in range(0, len(keyinp56), 28)]    
  val2 = [x-1 for x in BookInitPermOrder]    
  inputstr = hex2str(inputblock)    
  inputstr = Permutation(inputstr, val2)    
  
  input_seq = [inputstr[i:i+32] for i in range(0, len(inputstr), 32)]   
  inpkey48 = []    
  
  for i in range(num_rounds):       
    k, C_out, D_out = des_keygen(keyinp28[0], keyinp28[1],i)        
    inpkey48.append(k)        
    keyinp28[0] = C_out       
    keyinp28[1] = D_out    
    
  i = len(inpkey48) - 1    
    
  for x in range(num_rounds):        
    LE_out32, RE_out32 = des_round(input_seq[0], input_seq[1], inpkey48[i])        
    input_seq[0] = LE_out32        
    input_seq[1] = RE_out32        
    i = i-1    
    
  text = RE_out32 + LE_out32   
  val3 = [x-1 for x in BookInvInitPermOrder]    
  plainblock = Permutation(text, val3)   
  
  #print ("Plainblock: " ,plainblock)    
  return plainblock
  
def des_dec_test(input_fname, inputkey64, num_rounds, output_fname):    

  finp = open(input_fname, 'rb')    
  cipherbyteseq = finp.read()    
  finp.close()    
  cipherbyteseq = cipherbyteseq.decode()    
  
  inp = [cipherbyteseq[i:i+16] for i in range(0, len(cipherbyteseq), 16)]    
  inputkey64 = byte2str(inputkey64)   
  
  temp = []    
  for i in range(0, len(inp)):        
    input_seq = des_dec(inp[i],16,inputkey64)  
    temp.append(str(input_seq))        
    
    plainbyteseq = ''.join(temp)
    inp = bytes(plainbyteseq, 'utf-8')   
    
    inp = [inp[i:i+8] for i in range (0, len(inp),8)]    
    hexval = [hex(int(inp[h],2))[2:] for h in range (len(inp))]    
    
    plainbyteseq =''.join(hexval)    
    plainbyteseq = bytes(plainbyteseq, 'utf-8')    
    
    fout = open(output_fname, 'wb')    
    fout.write(plainbyteseq)    
    fout.close()    
    plainbyteseq = plainbyteseq.decode()   
    plainbyteseq = bytes.fromhex(plainbyteseq)    
    plainbyteseq = plainbyteseq.decode("ascii")    
    
    print("Decoded Plaintext: ",plainbyteseq)
    
if __name__ =="__main__":    
      
  des_enc_test('input.txt', 'www1234w', 16, 'output.txt')
  Key = b'\x11\x23\x34\xa4\xef\x9e\x00\xbc'
  des_enc_test("test_des.txt", Key , 16, "test_enc_des.txt")
  des_dec_test("test_enc_des.txt",Key, 16, "test_dec_des.txt")
